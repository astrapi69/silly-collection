group = "$groupPackage" as Object
version = "$projectVersion" as Object
description = "$rootProject.name"

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.ben-manes:gradle-versions-plugin:$gradlePluginVersionsVersion"
        classpath "gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:$licenseGradlePluginVersion"
        classpath "org.ajoberstar.grgit:grgit-gradle:$grgitGradlePluginVersion"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:$spotlessGradlePluginVersion"
    }
}

apply plugin: "java"
apply plugin: "java-library"
apply plugin: "maven-publish"
apply plugin: "signing"
apply plugin: "com.github.ben-manes.versions"
apply plugin: "com.github.hierynomus.license"
apply plugin: "jacoco"
apply plugin: "org.ajoberstar.grgit"
apply plugin: "com.diffplug.spotless"
// import gradle files
apply from: "dependencies.gradle"
apply from: "publishing.gradle"
apply from: "formatting.gradle"
apply from: "licensing.gradle"
apply from: "testing.gradle"
apply from: "packaging.gradle"

sourceCompatibility = "$projectSourceCompatibility" as Object

task tagRelease {
    description = "Tags the current head with the project\'s version."
    doLast {
        grgit.tag.add {
            name = "RELEASE-${project.version.toString()}"
            message = "New release in version ${version}"
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name "Sonatype Nexus Releases"
        url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
        mavenContent {
            releasesOnly()
        }
    }
    maven {
        name "Sonatype Nexus Snapshots"
        url "https://oss.sonatype.org/content/repositories/snapshots"
        mavenContent {
            snapshotsOnly()
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    // uncomment the next line for build with compiler argument -Xlint:deprecation
    // options.compilerArgs << "-Xlint:deprecation"
    // uncomment the next line for build with compiler argument -Xlint:unchecked
    // options.compilerArgs << "-Xlint:unchecked"
}
